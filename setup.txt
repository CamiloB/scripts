# wireless router username "admin" password "admin"

# Fix wireless connections being frequently dropped
# cd /lib/firmware
# sudo mv iwlwifi-7260-7.ucode  iwlwifi-7260-7.ucode.bak
# sudo wget https://git.kernel.org/cgit/linux/kernel/git/egrumbach/linux-firmware.git/plain/iwlwifi-7260-7.ucode
# And since iwlwifi-7260-8.ucode was in there also, I did that same with that
# sudo mv iwlwifi-7260-8.ucode  iwlwifi-7260-8.ucode.bak
# sudo wget https://git.kernel.org/cgit/linux/kernel/git/egrumbach/linux-firmware.git/plain/iwlwifi-7260-8.ucode

# chrome and remote desktop
cd ~/installables
axel -n 10 https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i ~/Downloads/google-chrome-stable_current_amd64.deb
sudo dpkg -i ~/Downloads/chrome-remote-desktop_current_amd64.deb
# if it doesn't work then sudo apt-get -f install and try again
sudo apt-get install lightdm
# if the "enable remote connections" button doesn't appear, then
touch ~/.chrome-remote-desktop-session
# and put in the line
exec /usr/sbin/lightdm-session "i3"

# chrome default browser
sudo cp /opt/google/chrome/google-chrome.desktop /usr/share/applications
# and then set as default in some funny settings (best use MATE then)

# better display
# xgamma -gamma 0.5

# copy the backup of the home folder from the external
# hard drive
mkdir ~/log
touch ~/log/rsync.log
touch ~/log/setup.log
sudo rsync -av /media/nacnudus/Elements/ ~/ 2>&1 | tee -a ~/log/rsync.log ~/log/setup.log

# update
sudo apt-get update
sudo apt-get upgrade

# install synapse (defunct)
# sudo add-apt-repository ppa:noobslab/apps
# sudo apt-get update
# sudo apt-get install synapse
# and get it to recognise the terminal
# comment out the line with "OnlyShowIn=MATE" in this file:
# gksudo pluma /usr/share/applications/mate-terminal.desktop

# install chromium
# sudo apt-get install chromium-browser

# solarized palette for MATE terminal
# sudo apt-get install dconf-tools
# git clone https://github.com/oz123/solarized-mate-terminal.git
# cd solarized-mate-terminal.git
# ./ solarized-mate.sh light

# solarized palette for Terminator
git clone https://github.com/ghuntley/terminator-solarized.git
mkdir -p ~/.config/terminator/
cp config ~/.config/terminator/

# install git
sudo apt-get install git git-annex
git config --global color.ui true
git config --global credential.helper 'cache --timeout 3600'

# install xmonad
# not working yet - doesn't actually start xmonad.
cd ~/Downloads
git clone https://github.com/fcostin/xmonad_and_mate.git
cd xmonad_and_mate
# the mateconftool-2 line in the makefile doesn't work - as the contributor says - so try it directly in the terminal:
mateconftool-2 -s /desktop/mate/session/required_components/windowmanager xmonad --type string
# This makes it impossible to use normal mate.  If you want to do that, then
mateconftool-2 -s /desktop/mate/session/required_components/windowmanager mate --type string

# pdf editor: pdftk
sudo apt-get install pdftk

# get_iplayer - run separate get_iplayer_install bash script
#or
sudo apt-get install get-iplayer ffmpeg libavcodec-extra-54

# install audacity
sudo apt-get install audacity

# burn audio CDs.  Apparently you can do this with
cdrecord -v -pad speed=1 dev=0,0,0 -dao -audio -swab *.wav

# install gparted
sudo apt-get install gparted

# make the document viewer default for pdf
xdg-mime default atril.desktop

# install posgtresql
sudo apt-get install postgresql  libpq-dev
sudo su -npostgres
psql -d postgres -U postgres
alter user postgres with password 'a': # this is psql's response
\q

# terminal transparency
sudo apt-get install gconf-editor
apps>mtacity>general> check compositing_manager

# install gconf-editor
sudo apt-get install gconf-editor

# two-finger scrolling
synclient VertTwoFingerScroll=1
synclient HorizTwoFingerScroll=1
synclient EmulateTwoFingerMinW=5
synclient EmulateTwoFingerMinZ=48
# Make these changes permanent:
wget https://raw.github.com/swook/synclient-settings-saver/master/update-synclient-settings.sh
bash update-synclient-settings.sh
# if this doesn't work, repeat it after this
# https://wiki.debian.org/SynapticsTouchpad
aptitude update
aptitude install xserver-xorg-input-synaptics
# Edit (create) /etc/X11/xorg.conf
Section "Module"
    Load           "synaptics"
EndSection
Section "InputDevice"
    Identifier     "Mouse0"
    Driver         "synaptics"
    Option         "Protocol" "auto"
    Option         "Device" "/dev/psaux"
    Option         "Emulate3Buttons" "no"
    Option         "ZAxisMapping" "4 5"
Option "TapButton1" "1"
Option "SpecialScrollAreaRight" "true"
Option "VertEdgeScroll" "true"
Option "VertTwoFingerScroll" "true"
EndSection
# reboot

#################################
# guacamole not recommended
# use noVNC instead
#################################
# install guacamole
sudo apt-get install guacamole-tomcat
# other steps?
sudo ln -s /var/lib/guacamole/guacamole.war /var/lib/tomcat6/webapps
sudo ln -s /etc/guacamole/guacamole.properties /var/lib/tomcat6/common/classes
sudo keytool -genkey -alias guacamole -keypass [password] -keystore /var/lib/tomcat6/webapps/.keystore -storepass [same password]
# put the keystore path into /etc/tomcat6/server.xml under "keystoreFile" in a connector, e.g. "Define a SSL HTTP/1.1 Connector on port 8443" - search for that line and uncomment the example connector.  You also have to put keystorePass and the password.
# there seems to be a symlink here, because /var/lib/tomcat6/conf/server.xml is the same file.
# set up a user
sudo nano /etc/guacamole/user-mapping.xml
# start guacd and tomcat
sudo service guacd restart
sudo service tomcat6 restart
# start a vnc (vino)
vino-preferences
/usr/lib/vino/vino-server
# open https://[your ip address]/guacamole
# or https://localhost:8443/guacamole
#################################

# install git
sudo apt-get install git

# install the SciPy stack
sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose

# install NoVnc
# also install numpy
sudo apt-get install python-numpy
git clone git://github.com/kanaka/noVNC
# install and start tightVNC
sudo apt-get install tightvncserver
vncserver -geometry 1012x412 :1
# this serves a fresh X desktop, rather than the current,
# so you don't get a hall of mirrors.
# the example geometry is the largest that Chromium will fit in a window on the HP mini screen without scrolling.
# The port is 5900 plus the number after the colon, i.e. 5901 in the example.
# Then start noVNC with
noVNC/utils/launch.sh --vnc localhost:5901 --listen 6080
# Then open port 6080 by logging into the router (192.168.1.1, username="admin", password="admin")
Advanced Setup > NAT > Virtual Servers
# Then, in a browser, navigate to
http://121.74.90.49:6080/vnc.html?host-nactop&port=6080
# To do securely, create a certificate
openssl req -new -x509 -days 365 -nodes -out self.pem -keyout ./noVNC/self.pem
# Then instead of using novNC/utils/launch.sh, do
./noVNC/utils/websockify --ssl-only --cert=./noVNC/self.pem --web=./noVNC/ 6081 localhost:5901
# To insist on a MATE desktop (say, on an Ubuntu Amazon EC2 instance), write this to ~/.vnc/xstartup
########
#!/bin/sh

# Uncomment the following two lines for normal desktop:
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
#. /etc/X11/xinit/xinitrc
/usr/bin/mate-session

[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
xsetroot -solid grey
vncconfig -iconic &
x-terminal-emulator -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
x-window-manager &
########

# install roundcube webmail for gmail
# You'll need apache, and mysql installed. If they are not already installed the following command will install them.
sudo aptitude install apache2 
# Run the following command to install roundcube
sudo aptitude install roundcube roundcube-mysql
# Configure roundcube
sudo dpkg-reconfigure roundcube-core
# Next create a symbolic link to apache's document root, in this case /var/www
sudo ln -s /usr/share/roundcube /var/www/roundcube
# Restart Apache
sudo service apache2 restart
# Open port 80 and browse to your machine at http://myhostname.mydomainname.com/roundcube
# change the main.inc.php parameters as follows:
// IMAP Settings
$rcmail_config['default_host'] = 'ssl://imap.gmail.com';
$rcmail_config['defaul_port'] = 993;
$rcmail_config['imap_auth_type'] = null;
$rcmail_config['username_domain'] = 'your_domain_name';
$rcmail_config['mail_domain'] = 'you_domain_name';
// SMTP Settings
$rcmail_config['smtp_server'] = 'ssl://smtp.gmail.com';
$rcmail_config['smtp_port'] = 465;
$rcmail_config['smtp_user'] = '%u';
$rcmail_config['smtp_pass'] = '%p';
//MBOX Settings
$rcmail_config['drafts_mbox'] = '[Gmail]/Drafts';
$rcmail_config['junk_mbox'] = '[Gmail]/Spam';
$rcmail_config['sent_mbox'] = '';
$rcmail_config['trash_mbox'] = '';


# install traceroute
sudo apt-get install traceroute

# install curl (gives your external ip address)
sudo apt-get install curl
# use it
curl ip.alt.io

# install Zotero
wget https://raw.github.com/smathot/zotero_installer/master/zotero_installer.sh -O /tmp/zotero_installer.sh
chmod +x /tmp/zotero_installer.sh
sudo /tmp/zotero_installer.sh
# run with
/opt/zotero/zotero

# install MS Office
# install wine?  Possibly not necessary because PlayOnLinux installs it
# itself.
sudo add-apt-repository ppa:ubuntu-wine/ppa
sudo apt-get update
sudo apt-get install wine1.7
# and winbind (definitely necessary)
sudo apt-get install winbind
# try playonlinux (from the software centre - it asks for a EULA, which doesn't work in the terminal
# or follow the instructions on the website
wget -q "http://deb.playonlinux.com/public.gpg" -O- | sudo apt-key add -
sudo wget http://deb.playonlinux.com/playonlinux_precise.list -O /etc/apt/sources.list.d/playonlinux.list
sudo apt-get update
sudo apt-get install playonlinux
# it'll tell you you need xterm
sudo apt-get install xterm
# and then when you try to install from the CD, it'll play silly-buggers finding the CD, so
sudo mkdir /media/cdrom
sudo mount /dev/sd0 /media/cdrom
# then choose "cdrom" from the options in playonlinux

# install R and RStudio 
sudo add-apt-repository "deb http://cran.stat.auckland.ac.nz/bin/linux/ubuntu/ saucy universe"
# There's a problem with apt at the moment so try adding the development ppa
sudo add-apt-repository ppa:marutter/rrutter
sudo apt-get update
# or simply use the ubuntu repositories
sudo apt-get install r-base r-base-core r-base-dev r-cran-boot r-cran-class r-cran-cluster r-cran-codetools r-cran-foreign r-cran-kernsmooth r-cran-lattice r-cran-mass r-cran-matrix r-cran-mgcv r-cran-nlme r-cran-nnet r-cran-rpart r-cran-spatial r-cran-survival r-cran-rodbc littler python-rpy python-rpy-doc libgtk2.0-dev libcurl4-openssl-dev # for curl-config (for RCurl) sudo apt-get install libxml2-dev # for XML
# RStudio
# Watch out -- this is the server edition, not the desktop
# find your own URLs for the desktop edition
axel -n 10 http://download2.rstudio.org/rstudio-server-0.98.507-amd64.deb
sudo dpkg -i rstudio-server-0.98.507-amd64.deb

# install RStudio and shiny on Ubuntu AmazonEC2
# first, install R
sudo add-apt-repository "deb http://cran.stat.auckland.ac.nz/bin/linux/ubuntu saucy/"
sudo apt-get update
sudo apt-get install r-base
sudo apt-get install r-base-dev
# and for the vim-r-plugin to work via vimcom, you might need to do
sudo apt-get install libx11-dev
# and even then you need to install vimcom.plus for the object browser and
# some syntax highlighting.  Within in R, do
download.file("http://www.lepem.ufc.br/jaa/vimcom.plus_0.9-93.tar.gz",
              destfile = "vimcom.plus_0.9-93.tar.gz")
install.packages("vimcom.plus_0.9-93.tar.gz", type = "source",
                 repos = NULL)
download.file("http://www.lepem.ufc.br/jaa/colorout_1.0-2.tar.gz", destfile = "colorout_1.0-2.tar.gz")
install.packages("colorout_1.0-2.tar.gz", type = "source", repos = NULL)
# or for the development version (necessary with the dev version of
# Vim-R-plugin) do
git clone git://github.com/jalvesaq/VimCom.git
R CMD build VimCom
R CMD INSTALL vimcom.plus_0.9-93.tar.gz
# then RStudio
sudo apt-get install gdebi-core
sudo apt-get install libapparmor1  # Required only for Ubuntu, not Debian
wget http://download2.rstudio.org/rstudio-server-0.97.551-amd64.deb
sudo gdebi rstudio-server-0.97.551-amd64.deb
# open port 8787
# navigate to, say, http://ec2-54-215-128-108.us-west-1.compute.amazonaws.com:8787/
# Shiny - follow instructions https://github.com/rstudio/shiny-server/wiki/Ubuntu-step-by-step-install-instructions
# except before the shiny install, install codetools to make sure it's for R3.xx
sudo su - -c "R -e \"install.packages('codetools', repos='http://cran.rstudio.com/')\""
# continue from
sudo su - -c "R -e \"install.packages('shiny', repos='http://cran.rstudio.com/')\""
# then make user shiny directories available
sudo mkdir /etc/shiny-server/
sudo nano /etc/shiny-server/shiny-server.conf
# add the lines
server {
  # The TCP/IP port to listen on
  listen 3838;

  # Configure the root URL to be autouser
  location / {
    user_apps on;
  }
}
# and save.
# Users must put their apps into ~/ShinyApps subdirectories
# if there's anything wrong with that folder's permissions then
sudo chmod 775 ~/ShinyApps # gives you similar ones to the R folder

# install packages tm, Snowball and rJava
sudo apt-get install openjdk-7-jdk
sudo R CMD javareconf
sudo apt-get install r-cran-rjava

# install Orange (fails)
# first, get mercurial
sudo apt-get install mercurial
# clone the mercurial repository
hg clone https://bitbucket.org/biolab/orange
# dependencies
sudo apt-get install python-numpy
sudo apt-get install python-qt4
sudo apt-get install python-dev
# add sources to this file (gksudo pluma)
sudo pluma /etc/apt/sources.list
# the lines to add are
deb http://orange.biolab.si/debian squeeze main
deb-src http://orange.biolab.si/debian squeeze main
# install
sudo aptitude install orange-canvas
# or
sudo apt-get update
sudo apt-get install orange-canvas
# hopefully this works, but there might be some problem
# with having a later version of python than 2.5

# install Orange (2nd attempt) (fails)
wget http://orange.biolab.si/download/orange-source-snapshot-hg-2013-02-20.zip
unzip orange-source-snapshot-hg-2013-02-20.zip
# build it
cd Orange-2.6.1/source
make EXCLUDE_ORANGEQT=1
sudo python setup.py build
# fails at this point, so
sudo python setup.py clean

# monetdb
# instructions here: https://www.monetdb.org/downloads/deb/
# create file /etc/apt/sources.list.d/monetdb.list with two lines:
deb http://dev.monetdb.org/downloads/deb/ trusty monetdb
deb-src http://dev.monetdb.org/downloads/deb/ trusty monetdb
sudo wget --output-document=- http://dev.monetdb.org/downloads/MonetDB-GPG-KEY | sudo apt-key add -
sudo apt-get update
sudo apt-get install monetdb5-sql monetdb-client
sudo usermod -a -G monetdb nacnudus
# Create a database farm
mkdir monetdb
monetdbd create /home/nacnudus/monetdb
monetdbd start /home/nacnudus/monetdb
monetdb create voc
monetdb release voc
mclient -u monetdb -d voc
# password is "monetdb"
# R instructions here: https://www.monetdb.org/Documentation/UserGuide/MonetDB-R
# in the R shell
install.packages("MonetDB.R")
library(MonetDB.R)
library(dplyr)

# install mpg123 (convert mp3 to wav, etc.)
sudo apt-get install mpg123

# install audio transcription with pocketsphinx
sudo apt-get install pocketsphinx
# doesn't work, try building from source
# first get SphinxBase
wget http://downloads.sourceforge.net/project/cmusphinx/sphinxbase/0.8/sphinxbase-0.8.tar.gz
tar -xvf sphinxbase-0.8.tar.gz
cd sphinxbase-0.8
./configure
sudo make
sudo make install
# then pocketsphinx
wget http://downloads.sourceforge.net/project/cmusphinx/pocketsphinx/0.8/pocketsphinx-0.8.tar.gz
tar -xvf pocketsphinx/0.8/pocketsphinx-0.8.tar.gz
# configure for long .wav files.
# change the file
pocketsphinx-0.8/src/libpocketsphinx/hmm.h
# change the line (including the hash)
#define MAX_N_FRAMES MAX_INT16
to (including the hash)
#define MAX_N_FRAMES MAX_INT32
# also change a few lines above
typedef int16 frame_idx_t;
# to
typedef int32 frame_idx_t;
# now carry on compiling
cd pocketsphinx-0.8
./configure
sudo make
sudo make install
# you have to do this bit to get the shared library to work
sudo ldconfig
# convert .mp3 to .wav
for i in *.mp3; do mpg123 -w "$(basename "$i" .mp3)".wav "$i"; done
# convert .wav to correct format
for i in *.wav; do sox "$i" -r 8000 -c 1 "$(basename "$i" .wav)"_resampled.wav; done
# transcribe to stdout
pocketsphinx_continuous -samprate 8000 -infile resampled.wav
# or suppress the logger by redirecting stderr to /dev/null
pocketsphinx_continuous -infile resampled.wav 2> /dev/null
# batch mode
for i in *.wav; do pocketsphinx_continuous -infile "$i" 2> "$(basename "$i" .wav)".log 1>"$(basename "$i" .wav)".txt; done

# install musescore from the ppa
sudo add-apt-repository ppa:mscore-ubuntu/mscore-stable
sudo apt-get update
sudo apt-get install musescore

# install lilypond using their script
cd ~/Downloads
axel -n 10 http://download.linuxaudio.org/lilypond/binaries/linux-64/lilypond-2.18.0-1.linux-64.sh
sudo sh lilypond-2.18.0-1.linux-64.sh
sudo apt-get install timidity freepats # midi player and soundfont

# pdf booklets - takes lots of megabytes and requires latex (texlive)
sudo apt-get install pdfjam
pdfbook --short-edge --a3paper filename.pdf

# install docx2txt and antiword to grep Microsoft Word
sudo apt-get install docx2txt
sudo apt-get install antiword

# install John the Ripper (password guesser)
cd Downloads
wget http://openwall.com/john/g/john-1.7.9-jumbo-7.tar.bz2
tar xvf john-1.7.9-jumbo-7.tar.bz2
cd john-1.7.9-jumbo-7/src/
nano Makefile # Uncomment lines as follows:
#########################################
OMPFLAGS =
# gcc with OpenMP
OMPFLAGS = -fopenmp
OMPFLAGS = -fopenmp -msse2
###########################
make # to see available target systems.  Use linux-x86-32-native
make linux-x86-32-native
cd ../run # where the binaries are
./john --test # benchmark
# where file.txt is:
Bob:7c6a180b36896a0a8c02787eeafb0e4c
# get that hash by logging into (Mac) as single-user root (hold CMD+s during boot)
dscl localhost -read /Search/Users/<username> | grep GeneratedUID | cut -c15-
cat /var/db/shadow/hash/<GUID> | cut -c169-216
# to run John:
./john file.txt
Loaded 1 password hash (Raw MD5 [128/128 SSE2 intrinsics 12x])
password1        (Bob)

# BeebEm
# Install the dependencies
sudo apt-get install libsdl1.2-dev libgtk2.0-dev build-essential
# create a directory
mkdir beebem && cd beebem
# Get the source files and patches
wget http://beebem-unix.bbcmicro.com/download/beebem-0.0.13{.tar.gz,_64bit.patch,-keys.patch,_menu_crash.patch}
# Unpack the main source-code
tar -xzf beebem-0.0.13.tar.gz
# patch the source-code
forr file in *.patch; do patch -p0 < $file; done
# Change directory into the source-code directory
cd beebem-0.0.13/
# build it
./configure --enable-econet
make
sudo make install-strip

# Kiwix (offline Wikipedia)
wget http://downloads.sourceforge.net/project/kiwix/0.9_rc2/kiwix-0.9-rc2-linux-i686.tar.bz2?r=http%3A%2F%2Fwww.kiwix.org%2Fwiki%2FSoftware&ts=1370213848&use_mirror=superb-dca2

# axel - multithreaded download (alternative is prozilla)
sudo apt-get install axel

# postgresql
sudo apt-get install postgresql

# QGIS
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
sudo apt-get update
sudo apt-get install qgis
# ftools plugin - doesn't work
cd ~/.qgis/python/plugins
wget http://www.ftools.ca/tools/current/fTools.zip
unzip fTools.zip
rm fTools.zip
# Fire up QGIS and select the 'Plugins' menu and click on 'Manage Plugins...'
# Select the desired plugin from the list and click 'OK'.
# You're done! You can now start using the plugin.

# spatialite
sudo apt-get install sqlite3
sudo apt-get install libspatialite5 spatialite-bin

# mdbtools
sudo apt-get install mdbtools mdbtools-doc
# apparently there are no manpages.  There's a graphical utility, though:
sudo apt-get install mdbtools-gmdb2
# and that does have a manpage that lists several other tools that have
# manpages:
mdb-export
mdb-hexdump
mdb-prop
mdb-sql
mdb-ver
mdb-array
mdb-header
mdb-parsecsv
mdb-schmea
mdb-tables

# ebooks from Wellington City Libraries
# download Adobe Digital Editions
wget http://downloads.yahoo.com/software/windows-knick-knacks-adobe-digital-edition-for-ebooks-s245191
# open with wine windows program loader (right-click)
# after installation, only click-and-drag will open ebooks

# ebooks again, this time via winetricks and this video:
http://www.youtube.com/watch?v=oJoRCAbUhms
sudo apt-get install winetricks
winetricks --gui
# install the app Adobe Digital Editions and run it (via winetricks)
# your username is nacnudus@gmail.com
# Close everything.  Plug in your ereader.
# Go back to winetricks --gui, Adobe Digital Editions,
# run wineconfig from there.  Create a new drive, duplicate the folder
# structure of the nook (basically following this video: http://www.youtube.com/watch?v=oJoRCAbUhms)

# remove epub DRM via Calibre plugin
# see links below, especially dikkisdiatribe
http://calibre-ebook.com/download_linux
http://apprenticealf.wordpress.com/2012/09/10/calibre-plugins-the-simplest-option-for-removing-most-ebook-drm/
http://dikkiisdiatribe.blogspot.co.nz/2013/01/alternate-method-linux-calibre-e-books.html
# I last successfully downloaded Adobe Digital Editions 1.7 from here:
http://download1250.mediafire.com/863mm8co7dvg/cm075hmug9nsju5/Adobe+Digital+Editions+1.7.2.exe
sudo apt-get install playonlinux winetricks
axel -n 10 http://www.epubee.com/download/Removing-ePub-drm-use-python-script.rar
# install the DRM-remover plugin
sudo apt-get install xdg-utils
# read README for the encryption keys
# configure the plugin
# To read a book:
# Click and drag from the downloaded thingy to Adobe
# Digital Editions
# Then add the downloaded book to Calibre from
# /home/nacnudus/My\ Digital\ Editions/

# Citrix xenApp for CAS
# install from the .deb on the Citrix page
# add some certificates from mozilla

# doc and docx to txt
sudo apt-get install catdoc docx2txt

# TexLive
sudo mount -t iso9660 -o ro,loop,noauto ~/installables/texlive2013-20130530.iso ~/usb
sudo ~/usb/install-tl --profile=~/scripts/texlive.profile
export PATH=$PATH:/usr/local/texlive/2013/bin/x86_64-linux
export MANPATH=$MANPATH:/usr/local/texlive/2013/texmf-dist/doc/man
export INFOPATH=$INFOPATH:/usr/local/texlive/2013/texmf-dist/doc/info
sudo umount ~/usb
sudo apt-get install xzdec
tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet
tlmgr init-usertree
tlmgr update --all

# i3 window manager - ubuntu packages are usually out of date.
echo "deb http://debian.sur5r.net/i3/ saucy universe" | sudo tee -a /etc/apt/sources.list
sudo apt-get --allow-unauthenticated install sur5r-keyring
sudo apt-get update
sudo apt-get install i3 i3status i3lock
sudo apt-get install python-pip
sudo pip install i3-py
sudo apt-get install xbacklight # for obvious reasons
sudo apt-get install dmenu
# make the dotfiles executable and symlink to them.
# Allow everyone to use pm-hibernate and pm-suspend without password
# so that dmenu will do it.
# Add these to /etc/sudoers (visudo) and you will be able to use "sudo pm-suspend" in dmenu.
ALL ALL=NOPASSWD:/usr/sbin/pm-hibernate
ALL ALL=NOPASSWD:/usr/sbin/pm-suspend
ALL ALL=NOPASSWD:/usr/sbin/shutdown
ALL ALL=NOPASSWD:/usr/sbin/iwconfig
# Network manager---add this to the config
exec --no-startup-id nm-applet
# screenshots---install scrot; the keybindings are already set up
sudo apt-get install scrot
# Power management (can't quite remember this but...)
# Add to the config file
exec mate-power-manager

# Terminator
sudo add-apt-repository ppa:gnome-terminator
sudo apt-get update
sudo apt-get install terminator
export TERM=terminator

# ag, like grep or ack but faster, apparently
sudo apt-get install silversearcher-ag

# exuberant-ctags for vim tagbar
sudo apt-get install exuberant-ctags

# jedi for vim auto-completion
sudo pip install jedi

# psutils for vim latex plugin
sudo pip install psutils

# # language tool for vim grammar checking -- a grade A pain, use texstudio
# instead
# go to the website and install the standalone version or
# axel -n 10 https://www.languagetool.org/download/LanguageTool-2.4.1.zip
# sudo mkdir -p ~/lib/LanguageTool
# sudo mv LanguageTool-1.4.2.zip ~/lib/LanguageTool/
# cd ~/lib/LanguageTool
# sudo unzip LanguageTool-1.4.2.zip
# sudo apt-get install openjdk-6-jre # 94 megabytes!
# # Then you need to define the path to LanguageTool.jar inside your .vimrc:
# let g:languagetool_jar=$HOME . '/lib/LanguageTool/LanguageTool.jar'

# vim
# none of this, frankly, works, so just sudo apt-get install vim-gnome.
# and then install NeoBundle according to its github instructions.  This will
# then install all the remaining bundles for you once you've given it the
# right dotfiles.
# for neocomplete you need lua:
# curl -R -O http://www.lua.org/ftp/lua-5.2.2.tar.gz
# tar zxf lua-5.2.2.tar.gz
# cd lua-5.2.2
# make linux test
sudo apt-get install lua50 liblua50-dev liblualib50-dev
# carry on with vim
sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev ruby-dev mercurial
sudo apt-get remove vim vim-runtime gvim
sudo apt-get remove vim-tiny vim-common vim-gui-common
cd ~
hg clone https://code.google.com/p/vim/
cd vim
./configure --with-features=huge \
            --enable-rubyinterp \
            --enable-pythoninterp \
            --with-python-config-dir=/usr/lib/python2.7-config \
            --enable-perlinterp \
            --enable-gui=gtk2 --enable-cscope --prefix=/usr \
            --enable-luainterp \
            --with-lua-prefix=/usr/include/lua
make VIMRUNTIMEDIR=/usr/share/vim/vim74
sudo make install

# ghi - github issues from the command line (and Vim?)
curl -s https://raw.github.com/stephencelis/ghi/master/ghi > ghi && \
  chmod 755 ghi && \
  sudo mv ghi /usr/local/bin

# zsh, the z shell
sudo apt-get install zsh
# set it as the default shell
chsh -s /usr/bin/zsh # doesn't work as root
# oh-my-zsh extension
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh

# inconsolata font
sudo apt-get install fonts-inconsolata

# kexi, like MS Access.
sudo apt-get install kexi

# Aaron's printer
sudo apt-get install libc6 libcups2 libpopt0
sudo apt-get install libatk1.0-0 libcairo2 libfontconfig1 libglib2.0-0 libgtk2.0-0 libpango1.0-0 libpng12-0 libtiff4 libx11-6 libxcursor1 libxext6 libxinerama1 libxml2 libxrandr2 libxrender1
http://support-nz.canon.co.nz/contents/NZ/EN/0100301402.html
http://pdisp01.c-wss.com/gdl/WWUFORedirectTarget.do?id=MDEwMDAwMzAxNDAx&cmp=ABS&lang=EN
# Download the file and extract it.
sudo dpkg -i # doing the "common" .deb first, then the mp280.

# pandoc
sudo apt-get install pandoc
# or for latest version for knitr
sudo apt-get install haskell-platform
sudo cabal update
sudo cabal install pandoc pandoc-citeproc

# digiKam to organise photos
sudo apt-get install digiKam
# Phewee, it's huge!

# tmux (build rather than repository)
sudo apt-get install tmux # works fine these days
# For the sake of maximizing panes in version 1.8 with tmux-prefix z.
# Download it, then:
# cd ~/Downloads
# tar -xvf tmux-1.8.tar.gz
# cd tmux-1.8

sudo apt-get install libevent-dev libncurses-dev
autoreconf -fis
./configure
make
sudo make install

# Linux Mint usb boot creator
sudo mintstick

# Search ubuntu packages
sudo apt-get install apt-file
# Then use like apt-file -x search "/file/name"

# File/partition recovery
sudo apt-get install testdisk
sudo testdisk # recover a lost/deleted partition table
sudo photorec # never mind the partition, recover the files

# gimp and gimp-ufraw for editing CR2 Canon Raw 2 files
sudo apt-get install gimp gimp-ufraw

# clementine music organiser and player
sudo apt-get install clementine

# jekyll
# # create a git repository called nacnudus.github.com
# sudo apt-get install rubygems ruby1.9-dev # or whichever version matches the
# current ruby
# sudo gem install rdoc
# sudo gem install jekyll
# sudo gem install rdiscount
# git clone https://github.com/plusjade/jekyll-bootstrap.git nacnudus.github.com
# cd nacnudus.github.com
# git remote set-url origin https://github.com/nacnudus/nacnudus.github.com
# git push origin master
# git clone https://github.com/plusjade/jekyll-bootstrap.git
# cd jekyll-bootstrap
# jekyll --serve

# jekyll, let's try this again
# create a git repository
git clone https://github.com/plusjade/jekyll-bootstrap.git repository-name
# check ruby --version is 1.9.3 or 2.0.0, beware 1.9.3 may look like 1.9.1
sudo apt-get install ruby1.9.1-dev # even though it's actually 1.9.3
sudo gem install bundler
cd repository-name
echo "source 'https://rubygems.org'" > Gemfile
echo "gem 'github-pages'" >> Gemfile
sudo bundle install
# If this asks you to do something with rvm use 1.9.3 or whatever, you'll
# need to right-click on the terminal, preferences, profile, use command as
# login shell (or something), and then either log out and in, or use a text
# terminal for this bit.

# texstudio
sudo apt-get install texstudio
# Must be configured options>configure

# baobab -- graphical disk usage analyser with tree graphs and ring charts
sudo apt-get install baobab

# iTunes **** Still can't get it to work! use gPodder and Feed Flipper
# (website) ****
# Can be done via play-on-linux, but you have to install
# AppleApplicationSupport.msi as follows:
# Extract the msi files from the installer as follow (unrar did not recognize
# it as a RAR archive). Run wine iTunesSetup.exe. When it ask you to accept
# the licence, kill wine (wineserver -k 9) (not just click exit as it will
# remove temporary files); go and fetch the msi files in a temporary directory
# (do not remember the name; find -iname "*.msi"

# gPodder
sudo apt-get install gPodder
# and then paste iTunes URLs into Feed Flipper (online) to subscribe

# coursera-dl to download coursera courses
git clone https://github.com/coursera-dl/coursera
cd coursera-cl
pip install -r requirements.txt
# then use by
./coursera-dl -u nacnudus@gmail.com -p password --path ../path course-name

# redshift to colour screen at night
sudo apt-get install redshift
  config in .i3

# smartctl from smartmontools for disk drive health
sudo apt-get install smartmontools

# map right alt to context menu
# use sudo showkey to find the keycode
xmodmap -pke > ~/.Xmodmap # warning, wipes file if it exists!
vim ~/.Xmodmap # and do, e.g.
keycode 108 = Menu NoSymbol Menu
# in ~/.xinitrc add
if [ -f $HOME/.Xmodmap  ]; then
    /usr/bin/xmodmap $HOME/.Xmodmap
fi

# youtube-dl for downloading youtube videos
sudo apt-get install youtube-dl
# youtube-dl -f 137 url downloads 1080p mp4

# posGIS gdal PROJ.4 and rgdal for geospatial stuff
# this has all changed, see below
sudo add-apt-repository ppa:ubuntugis/ppa
sudo apt-get update
# GDAL
sudo apt-get install gdal-bin libgdal1
# PROJ.4
sudo apt-get install proj-bin
# PostGIS
sudo apt-get install python-software-properties
# you may already have this if you installed gdal etc.
sudo apt-get install postgresql-9.1-postgis libpq-dev
$ sudo passwd postgres
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
$ sudo -s -u postgres
postgres$ psql
psql (9.1.3)
Type "help" for help.

# postGIS ubuntu trusty 14.04
# http://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS21Ubuntu1310src
sudo apt-get install build-essential postgresql-9.3 postgresql-server-dev-9.3 libxml2-dev libgdal-dev libproj-dev libjson0-dev xsltproc docbook-xsl docbook-mathml
# and GDAL with python bindings
sudo apt-get install build-essential python-all-dev
wget http://download.osgeo.org/gdal/gdal-1.9.0.tar.gz
tar xvfz gdal-1.9.0.tar.gz
cd gdal-1.9.0
./configure --with-python
make
sudo make install
$ sudo passwd postgres
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
$ sudo -s -u postgres
postgres$ psql
psql (9.1.3)
Type "help" for help.

postgres=# \password postgres
Enter new password: 
Enter it again: 
postgres=# \q
postgres$ 
postgres$ createuser --superuser $USER     ---- note: createuser is a command line tool to create a PostgreSQL user, not a system account  
postgres$ createdb $USER
postgres$ psql
psql (9.1.3)
Type "help" for help.

postgres=# \password $USER
Enter new password: 
Enter it again: 
postgres=# \q
postgres$ exit
$USER$ psql
psql (9.1.3)
Type "help" for help.
$USER=#                        ---- voila!
createdb ruralRoads
psql ruralRoads
ruralRoads=# CREATE EXTENSION postgis;
CREATE EXTENSION
ruralRoads=# \q

# install yacas
# a computer algebra system
sudo apt-get install yacas

# install scribe (sphinx speech recognition)
git clone https://github.com/VikParuchuri/scribe.git speech-recognizer
cd speech-recogniser
sudo apt-get install bison python-dev
wget http://sourceforge.net/projects/cmusphinx/files/sphinxbase/0.8/sphinxbase-0.8.tar.gz/download
# extract
# cd into sphinxbase
./configure; make clean all
sudo make install
cd python
sudo python setup.py install
cd ..
wget http://sourceforge.net/projects/cmusphinx/files/latest/download?source=files
# extract
# cd into pocketsphinx
./configure; make clean all
sudo make install
sudo python setup.py install
cd ..
wget http://people.csail.mit.edu/hubert/pyaudio/packages/python-pyaudio_0.2.8-1_amd64.deb
sudo dpkg -i python{,3}-pyaudio_0.2.8-1_{i386,amd64}.deb
axel -n 10 http://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/US%20English%20Generic%20Language%20Model/cmusphinx-5.0-en-us.lm.gz/download
axel -n 10 http://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/US%20English%20Generic%20Acoustic%20Model/en-us.tar.gz/download
sudo ldconfig -v | grep sphinx

# Virtualbox
# changed in 14.04 see below
sudo add-apt-repository "deb http://download.virtualbox.org/virtualbox/debian saucy contrib"
cd ~/Downloads
wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
sudo apt-get update
sudo apt-get install linux-headers-$(uname -r) # didn't work
sudo apt-get install virtualbox-guest-dkms
sudo apt-get install virtualbox-guest-additions

# Virtualbox in 14.04
sudo add-apt-repository multiverse
sudo apt-get update
sudo apt-get install virtualbox-4.3
sudo apt-get install dkms
sudo adduser nacnudus vboxusers

# Pelican - knocks socks off the bloody-awful Jekyll
# quick guide here: http://fjavieralba.com/pelican-a-static-blog-generator-for-pythonistas.html
pip install virtualenv
pip install virtualenvwrapper
pip install pelican Markdown
# further instructions from the pelican website
# for themes, go somewhere else (not your blog)
git clone --recursive https://github.com/getpelican/pelican-themes
~/pelican-themes
pelican my_blog/md -t ~/pelican-themes/theme-name

# GraphViz for SchemaSpy
sudo apt-get install graphviz

# pandoc bleeding-edge
sudo apt-get install haskell-platform
cabal update
cabal install --force pandoc pandoc-citeproc
# uninstall existing pandoc
sudo apt-get purge pandoc
# and add ~./cabal to ~./profile
export PATH=$PATH:$HOME/.cabal/bin # Add cabal to PATH for pandoc

# moonlight, instead of silverlight # Doesn't work
sudo apt-get install moonlight-complete

# hugin photo panorama stitcher
sudo apt-get install hugin

# easytag for renaming mp3s sensibly
sudo apt-get install easytag

# tree to print directory structure
sudo apt-get install tree

# acpi to check battery capacity
sudo apt-get install acpi

# open-sankore
# download and install the .deb, then create a symlink for dmenu
sudo ln /usr/local/Open-Sankore-2.5.0/run.sh /usr/bin/opensankore -s

# mypaint also for whiteboarding
sudo apt-get install mypaint

# linssid for scanning wireless environment
sudo add-apt-repository ppa:wseverin/ppa
sudo apt-get install linssid

# get two-finger horizontal scrolling
xinput --set-prop 12 "Synaptics Two-Finger Scrolling" 1 1

# julia
sudo add-apt-repository ppa:staticfloat/juliareleases
sudo add-apt-repository ppa:staticfloat/julia-deps
sudo apt-get update
sudo apt-get install julia

# git extras
(cd /tmp && git clone --depth 1 https://github.com/visionmedia/git-extras.git && cd git-extras && sudo make install)

# standard ml for coursera programming languages
sudo apt-get install smln
# and some vim stuff https://github.com/chilicuil/vim-sml-coursera

# psensor to monitor motherboard temperature
# see http://xmodulo.com/2013/11/monitor-system-temperature-linux.html
sudo apt-get install lm-sensors hddtemp psensor
sudo sensors-detect
sudo service kmod start
sudo hddtemp -d /dev/sda
psensor

# lyx: latex gui
sudo add-apt-repository ppa:lyx-devel/release
sudo apt-get update
sudo apt-get install lyx

# qemu emulator (for raspberry pi)
sudo apt-get install git zlib1g-dev libsdl1.2-dev libpixman-1-dev libfdt-dev
mkdir ~/raspidev
cd ~/raspidev
git clone git://git.qemu-project.org/qemu.git
cd qemu
./configure --target-list="arm-softmmu arm-linux-user" --enable-sdl
make
sudo make install
# create Raspberry Pi virtual machine
cd ~/rpi/emulator
wget http://xecdesign.com/downloads/linux-qemu/kernel-qemu
qemu-system-arm -cpu ?
# may need bash for that last command

# keypass2
# instructions here: http://maxolasersquad.blogspot.co.nz/2013/10/install-keepasshttp-on-ubuntu.html
sudo apt-add-repository ppa:jtaylor/keepass
sudo apt-get update
sudo apt-get install keepass2 mono-complete kpcli
# integrate chrome plugin
sudo mkdir /usr/lib/keepass2/plugins
cd usr/lib/keepass2/plugins
wget https://raw.github.com/pfn/keepasshttp/master/KeePassHttp.plgx
sudo git clone -n https://github.com/pfn/keepasshttp.git --depth 1
cd keepasshttp
sudo git checkout HEAD KeePassHttp.plgx
# to update
sudo git pull
# Google-Drive for linux (Grive)
sudo apt-get install grive
cd ~/google_drive

# docker
sudo apt-get install cgroup-lite lxc
# then either
curl -sSL https://get.docker.com/ubuntu/ | sudo sh
# or
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
sudo sh -c "echo deb https://get.docker.com/ubuntu docker main /etc/apt/sources.list.d/docker.list"
sudo apt-get update
sudo apt-get install lxc-docker

# SQuirreL general SQL GUI
cd /home/nacnudus/Downloads
axel -n 10 http://iweb.dl.sourceforge.net/project/squirrel-sql/1-stable/3.6.0/squirrel-sql-3.6-standard.jar
java -jar squirrel-sql-3.6-standard.jar
# symlink for dmenu
sudo ln /home/nacnudus/squirrel-sql-3.6/squirrel-sql.sh /usr/bin/squirrel -s
# driver for MonetDB
axel -n 10 http://dev.monetdb.org/downloads/Java/Oct2014/monetdb-jdbc-2.12.jar

# Deja dup for backup
sudo apt-get install deja-dup

# pyCharm python IDE
# Download the tarball, extract it in the home directory, and add the
# directory/bin to the path (in ~/.profile) (already done)

# f.lux for warmer colours at night
sudo add-apt-repository ppa:kilian/f.lux
sudo apt-get update
sudo apt-get install fluxgui
